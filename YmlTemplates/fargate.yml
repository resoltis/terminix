# For Non Ingress Service -- Only need the Task Definition, Execution Role, and Service Definition Resources

AWSTemplateFormatVersion: '2010-09-09'
Description: # Service Name - ENV - Fargate CFT - Date
Parameters: 
  AlbListenerArn: #This will be static based on ECS Cluster
    Type: String
  VpcId:  #This will be static based on Account/Env 
    Type: String
  DockerImageUrl: #This will be surveyed
    Type: String
  TargetEnv: #this will be surveyed 
    Type: String
  ContainerName: #thisdwill be static based off project name in repo
    Type: String
  ContainerPort: #this will be surveyed
    Type: Number
    Default: 6379
  ClusterName: #this will be static based on Account/Env
    Type: String
  LogRetention: #Static 7 
    Type: Number
    Default: 7
  Version: # This will be surveyed - default to 1
    Type: String
    Default: 1
  RulePriority: #This is something we need to talk about (Not surveyed though)
    Type: Number
  BusinessUnitTag: #Surveyed by user
    Type: String  
  CustomerTag: #Surveyed by User
    Type: String 
  EnvironmentTag: #Surveyed by User (Dev/Test/Prod/QA/UAT or Migration/Training/Prod)
    Type: String
  ManagedByTag: #This is your web portal's name and static
    Type: String
  ProductOwnerTag: #Surveyed by user
    Type: String
  ProvisionedTag: #This is your web portal's name and static
    Type: String
  Subnets: #This is static based off the VPC ID
    Type: CommaDelimitedList
  DesiredCount: #Surveyed by user - default is 2
    Type: Number
    Default: 2
Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:  #build this off Service Name + Fargate-Execution-Role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Tags: 
        - Key: BusinessUnit
          Value: !Ref BusinessUnitTag
        - Key: Customer
          Value: !Ref CustomerTag
        - Key: Environment
          Value: !Ref EnvironmentTag
        - Key: ManagedBy
          Value: !Ref ManagedByTag
        - Key: ProductOwner
          Value: !Ref ProductOwnerTag
        - Key: Provisioned
          Value: !Ref ProvisionedTag
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Tags: 
        - Key: BusinessUnit
          Value: !Ref BusinessUnitTag
        - Key: Customer
          Value: !Ref CustomerTag
        - Key: Environment
          Value: !Ref EnvironmentTag
        - Key: ManagedBy
          Value: !Ref ManagedByTag
        - Key: ProductOwner
          Value: !Ref ProductOwnerTag
        - Key: Provisioned
          Value: !Ref ProvisionedTag
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref ExecutionRole
      Family: !Sub task-${AWS::StackName}
      NetworkMode: awsvpc
      RequiresCompatibilities: ['FARGATE']
      Cpu: # SET THIS by Surveying User for a ContainerCPU param add it to the above parameter list and do !Ref ContainerCPU
      Memory: # SET THIS by doing same as above but for ContainerMemory
      ContainerDefinitions: #A Task definition can have multiple containers each defined as part of this array. Let's assume its 1:1 right now and we can expand on the ability to add multi container setups to a Task definition if time.
        - Name: !Ref ContainerName
          Image: !Ref DockerImageUrl
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref ContainerName
          PortMappings:
            - ContainerPort: !Ref ContainerPort
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Tags: 
        - Key: BusinessUnit
          Value: !Ref BusinessUnitTag
        - Key: Customer
          Value: !Ref CustomerTag
        - Key: Environment
          Value: !Ref EnvironmentTag
        - Key: ManagedBy
          Value: !Ref ManagedByTag
        - Key: ProductOwner
          Value: !Ref ProductOwnerTag
        - Key: Provisioned
          Value: !Ref ProvisionedTag
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckPort: !Ref ContainerPort
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher: 
        HttpCode: '200'
      Name: !Ref ContainerName
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: TargetGroup
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'TargetGroup'
      Conditions:
      - Field: path-pattern
        Values: ['/*']
      ListenerArn: !Ref AlbListenerArn
      Priority: !Ref RulePriority
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: #servicename-logs
      RetentionInDays: !Ref LogRetention
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: #Service Name-SG
      VpcId: !Ref VpcId
      SecurityGroupIngress: #you will probably need to create a sub template of a "rule" for creating each rule of the SG. So the user can add onto the security group as many rules as needed for the app stack. 
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 10.0.0.0/8
  ServiceDefinition:
    DependsOn: ListenerRule
    Type: "AWS::ECS::Service"
    Properties: 
      Cluster: !Ref ClusterName
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      ServiceName: !Sub # "Service Name-${Version}"
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers: 
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: !Ref ContainerName
          ContainerPort: !Ref ContainerPort
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: !Ref Subnets
          SecurityGroups:
            - !Ref ContainerSecurityGroup